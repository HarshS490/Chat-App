// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String         @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  seenMessageIds  String[]       @db.ObjectId
  seenMessages    Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
  // self-relation for friend relationship
  friends         FriendShip[]   @relation("UserFriends")
  friendsOf       FriendShip[]   @relation("UserFriendsBack")

  requestsSent     FriendRequest[] @relation("FriendRequestSent")
  requestsRecieved FriendRequest[] @relation("FriendRequestRecieved")

  accounts Account[]
  messages Message[]
}

enum FriendRequestStatus {
  accepted
  declined
  pending
}

model FriendRequest {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String              @db.ObjectId
  receiverId String              @db.ObjectId
  sender     User                @relation("FriendRequestSent", fields: [senderId], references: [id])
  receiver   User                @relation("FriendRequestRecieved", fields: [receiverId], references: [id])
  status     FriendRequestStatus @default(pending)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model FriendShip {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("UserFriendsBack", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?  @default(false)
  image         String?
  messageIds    String[]  @db.ObjectId
  messages      Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  public_id String?
  createdAt DateTime @default(now())
  seenIds   String[] @db.ObjectId
  seen      User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // removed on Delete cascade as if the user is deleted their messages should still remain.
  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id])
}
